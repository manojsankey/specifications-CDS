/**
* Expression parser
*/
options
{
 JDK_VERSION = "1.5";

 LOOKAHEAD= 1;
 DEBUG_PARSER = false;
 DEBUG_TOKEN_MANAGER = false;
 DEBUG_LOOKAHEAD = false;
 UNICODE_INPUT = true;

 static = false;
}

PARSER_BEGIN(ExpressionParser)
package org.gdl2.expression.parser;
import java.io.*;
import java.util.*;
import org.gdl2.expression.*;
import org.gdl2.datatypes.*;

public class ExpressionParser
{
 private static final String CHARSET = "UTF-8";

 /* =========================  public interface ======================== */
 /* execute the parsing */
 public List < ExpressionItem > parseBooleanExpressions() throws ParseException
 {
   return expressions();
 }

 public List < ExpressionItem > parseArithmeticExpressions() throws ParseException
 {
   return expressions();
 }

 public ExpressionItem parse() throws ParseException
 {
   return expression_item();
 }

 /* re-initial the parser */
 public void reInit(File file) throws IOException
 {
   ReInit(new FileInputStream(file), CHARSET);
 }

 /* re-initial the parser */
 public void reInit(InputStream input) throws IOException
 {
   ReInit(new BufferedInputStream(input));
 }

 public static void main(String args []) throws ParseException
 {}
}

PARSER_END(ExpressionParser)

<* >
SKIP : /* WHITE SPACE */
{
 " "
| "\t"
| "\n"
| "\r"
| "\f"
}

<* >
SPECIAL_TOKEN : /* COMMENTS */
{
 < SINGLE_LINE_COMMENT : "--" (~[ "\n", "\r" ])* >
}

<* >
TOKEN : /* SYMBOLS - common */
{
 < SYM_MINUS : "-" >
| < SYM_PLUS : "+" >
| < SYM_STAR : "*" >
| < SYM_SLASH : "/" >
| < SYM_CARET : "^" >
| < SYM_DOT : "." >
| < SYM_SEMICOLON : ";" >
| < SYM_COMMA : "," >
| < SYM_TWO_COLONS : "::" >
| < SYM_COLON : ":" >
| < SYM_L_PARENTHESIS : "(" >
| < SYM_R_PARENTHESIS : ")" >
| < SYM_DOLLAR : "$" >
| < SYM_QUESTION : "?" >
| < SYM_L_BRACKET : "[" >
| < SYM_R_BRACKET : "]" >
| < SYM_INTERVAL_DELIM : "|" >
| < SYM_EQ : "==" >
| < SYM_GE : ">=" >
| < SYM_LE : "<=" >
| < SYM_LT : "<" >
| < SYM_GT : ">" >
| < SYM_NE : "!=" >
| < SYM_NOT : "not" | "!" >
| < SYM_AND : "and" | "&&" >
| < SYM_OR :  "or"  | "||" >
| < SYM_FALSE : "false" >
| < SYM_TRUE : "true" >
| < SYM_NULL : "null" >
| < SYM_IS_A : "is_a" >
| < SYM_IS_NOT_A : "!is_a" >
| < SYM_FOR_ALL : "for_all" >
| < SYM_ANY : "any" >
| < SYM_MAX : "max" >
| < SYM_MIN : "min" >
| < SYM_MATH_FUNCTION : "abs" | "ceil" | "exp" | "floor" | "log" | "log10" |  "log1p" | "round" | "sqrt" | "sin" | "cos"| "tan">
| < SYM_E : "e" >
| < SYM_FIRED : "fired" >
| < SYM_NOT_FIRED : "!fired" >
| < SYM_CURRENT_DATETIME : "currentDateTime" >
| < SYM_CURRENT_DATE : "currentDate" >
| < SYM_REF : "ref" >
| < SYM_ASSIGNMENT : "=" >
| < SYM_REMINDER : "%" >
| < SYM_DIV : "//" >
| < SYM_ELLIPSIS : ".." >
| < SYM_LIST_CONTINUE : "..." >
| < SYM_USE_TEMPLATE: "use_template">
| < SYM_IF: "if">
}

<* >
TOKEN :
{
 < #V_LOCAL_CODE_CORE : "g" [ "c", "t" ] ([ "0"-"9", "." ])+ [ "0"-"9" ] >
| < V_LOCAL_CODE : < V_LOCAL_CODE_CORE > >
| < V_QUANTITY :
   (
     < V_REAL >
   | < V_INTEGER >
   )
   "," ([ "a"-"z", "A"-"Z", "_", ".", "%", "*", "0"-"9", "[", "]", "{", "}", "/" ])+
       ([ "a"-"z", "A"-"Z", "_", ".", "%", "*","0"-"9", "[", "]", "{", "}", "/" ])*
       ([ "a"-"z", "A"-"Z", "_", ".", "%", "*","0"-"9", "[", "]", "{", "}" ])* >
| < V_PROPORTION :
   (
     < V_REAL >
   | < V_INTEGER >
   )
   ","
   (
     < V_REAL >
   | < V_INTEGER >
   )
   ","
   (["0"-"4"]) >
| < V_INTEGER :
   (< DIG >)+
 |
   "(-" (< DIG >)+ ")"
 |
   (< DIG >)
   {
     1, 3
   }
   (
     "," (< DIG >)
     {
       3
     }
   )+ >
|
 < V_ISO8601_DURATION: ("-")? "P"((<DIG>)+["y","Y"])?((<DIG>)+["m","M"])?((<DIG>)+["w","W"])?
 ((<DIG>)+["d","D"])?("T"((<DIG>)+["h","H"])?((<DIG>)+["m","M"])?
 ((<DIG>)+["s","S"])?)?>
|
 < V_ISO8601_DURATION_CONSTRAINT_PATTERN: "P"(["y","Y"])?(["m","M"])?
 (["w","W"])?(["d","D"])?"T"(["h","H"])?(["m","M"])?(["s","S"])?
 |"P"(["y","Y"])?(["m","M"])?(["w","W"])?(["d","D"])?>
|
 < V_DATE: (["0"-"9"]){4} "-" ( "0"["1"-"9"] | "1"["0"-"2"] ) "-"
           ( "0"["1"-"9"] | ["1"-"2"]["0"-"9"]|"3"["0"-"1"] ) >
|
 < V_HHMM_TIME: <HOUR_MINUTE> >
|
 < V_HHMMSS_TIME: < HOUR_MINUTE> <SECOND> >
|
 < V_HHMMSSss_TIME: < HOUR_MINUTE> <SECOND> <MILLI_SECOND> >
|
 < V_HHMMSSZ_TIME: < HOUR_MINUTE> <SECOND> <TIME_ZONE> >
|
 < V_HHMMSSssZ_TIME: < HOUR_MINUTE> <SECOND> <MILLI_SECOND> <TIME_ZONE> >
|
 < V_TIME: <HOUR_MINUTE> <SECOND> >
|

 < V_DATE_TIME_MS: <DATE_TIME> <MILLI_SECOND> >
|
 < V_DATE_TIME_Z: "("<DATE_TIME> <TIME_ZONE> ")" >
|
 < V_DATE_TIME: "("<DATE_TIME> ")" >
|
  < V_DATE_TIME_MSZ: <DATE_TIME> <MILLI_SECOND> <TIME_ZONE> >
|
  < #DATE_TIME: <V_DATE>"T"<V_TIME>>
|  < #TIME_ZONE: ["-","+"](["0"-"9"]){2}":"(["0"-"9"]){2} | "Z" >
|
 < #SECOND: ":" ["0"-"5"]["0"-"9"] >
|
 < #MILLI_SECOND: "."(["0"-"9"]){2, 3} >
|
 < #HOUR_MINUTE: ["0"-"9"]["0"-"9"] ":" ["0"-"5"]["0"-"9"] >
| < V_CODE_PHRASE : "[" (< LET_DIG_DUDSLR >)+ "::" (< LET_DIG_DUDS >)+ "]" >
| < V_CODE_PHRASE_RAW : (< LET_DIG_DUDSLR >)+ "::" (< LET_DIG_DUDS >)+ >
| < V_ORDINAL : ("-")? < V_INTEGER > "|" < V_CODE_PHRASE_RAW > < V_LABEL > >
| < V_ATTRIBUTE_IDENTIFIER : [ "a"-"z" ] (< LET_DIG_U >)* >
| < V_LABEL : "|" (~[ "|" ])* "|" >
| < V_REAL :
   (< DIG >)+ "./" ~[ ".", "0"-"9" ]
 | (< DIG >)+ "." (< DIG >)* [ "e", "E" ] ([ "+", "-" ])? (< DIG >)+
 | (< DIG >)* "." (< DIG >)+
   (
     [ "e", "E" ] ([ "+", "-" ])? (< DIG >)+
   )?
 | "(-" (< DIG >)* "." (< DIG >)+
   (
     [ "e", "E" ] ([ "+", "-" ])? (< DIG >)+
   )? ")"
 | (< DIG >)
   {
     1, 3
   }
   (
     "_" (< DIG >)
     {
       3
     }
   )+
   "./" ~[ ".", "0"-"9" ]
 | (< DIG >)
   {
     1, 3
   }
   (
     "_" (< DIG >)
     {
       3
     }
   )*
   "."
   (
     (< DIG >)
     {
       1, 3
     }
     (
       "_" (< DIG >)
       {
         3
       }
     )*
   )?
   [ "e", "E" ] ([ "+", "-" ])? (< DIG >)
   {
     1, 3
   }
   (
     "_" (< DIG >)
     {
       3
     }
   )*
 |
   (
     (< DIG >)
     {
       1, 3
     }
     (
       "_" (< DIG >)
       {
         3
       }
     )*
   )?
   "." (< DIG >)
   {
     1, 3
   }
   (
     "_" (< DIG >)
     {
       3
     }
   )*
   (
     [ "e", "E" ] ([ "+", "-" ])? (< DIG >)
     {
       1, 3
     }
     (
       "_" (< DIG >)
       {
         3
       }
     )*
   )? >
| < V_STRING :
   "'"
   (
     (
       "\\\"" (~[ "\'", "\n", "\\" ])*
     )
   |
     (
       "\\\\" (~[ "\'", "\n", "\\" ])*
     )
   |
     (
       "\n" ([ "\r", " ", "\t" ])*
     )
   | (~[ "\\", "\n", "\'" ])*
   )*
   "'" >
}

<* >
TOKEN : /* LOCAL TOKENS */
{
 < #DIG : [ "0"-"9" ] >
| < #LET_DIG : [ "a"-"z", "A"-"Z", "0"-"9" ] >
| < #LET_DIG_DD :
   < LET_DIG >
 | "."
 | "_"
 | "-" >
| < #LET_DIG_U :
   < LET_DIG >
 | "_" >
| < #LET_DIG_DU :
   < LET_DIG_U >
 | "-" >
| < #LET_DIG_DUDS :
   < LET_DIG_DU >
 | "."
 | "\\" >
| < #LET_DIG_DUDSLR :
   < LET_DIG_DUDS >
 | "("
 | ")" >
| < #V_LOCAL_TERM_CODE_REF : "[" < LET_DIG > (< LET_DIG_DD >)* "]" >
| < #PATH_SEGMENT : < V_ATTRIBUTE_IDENTIFIER > (< V_LOCAL_TERM_CODE_REF >)? >
| < V_RELATIVE_PATH : < SYM_SLASH > < SYM_SLASH > < PATH_SEGMENT > (< SYM_SLASH > < PATH_SEGMENT >)* >
| < V_ABSOLUTE_PATH : < SYM_SLASH > < PATH_SEGMENT > (< SYM_SLASH > < PATH_SEGMENT >)* >
}

List < ExpressionItem > expressions() :
{
 List < ExpressionItem > items = new ArrayList < ExpressionItem > ();
 ExpressionItem item = null;
}
{
 item = expression_item()
 {
   items.add(item);
 }
 (
   LOOKAHEAD(2)
   < SYM_COMMA > item = expression_item()
   {
     items.add(item);
   }
 )*
 {
   return items;
 }
}

ExpressionItem expression_item() :
{
 ExpressionItem item = null;
}
{
 (
   LOOKAHEAD(4)
   item = expression_node()
 |
   LOOKAHEAD(4)
   item = expression_leaf()
 )
 {
   return item;
 }
 {
   return item;
 }
}

CodePhrase code_phrase() :
{
 Token t;
 String lang = null;
 String langTerm = null;
 String langCode = null;
}
{
 t = < V_CODE_PHRASE >
 {
   lang = t.image;
   int i = lang.indexOf("::");
   langTerm = lang.substring(1, i);
   langCode = lang.substring(i + 2, lang.length() - 1);
 }
 {
   return new CodePhrase(langTerm, langCode);
 }
}

CodePhrase code_phrase_raw() :
{
 Token t;
 String lang = null;
 String langTerm = null;
 String langCode = null;
}
{
 t = < V_CODE_PHRASE_RAW >
 {
   lang = t.image;
   int i = lang.indexOf("::");
   langTerm = lang.substring(0, i);
   langCode = lang.substring(i + 2);
 }
 {
   return new CodePhrase(langTerm, langCode);
 }
}

/* ----------------------- expressions ----------------------- */
ExpressionItem expression_node() :
{
 ExpressionItem ret = null;
 ExpressionItem item = null;
 ExpressionItem item2 = null;
 OperatorKind op = null;
 List<AssignmentExpression> assignmentExpressions = java.util.Collections.EMPTY_LIST;
 List<Variable> inputVariables = java.util.Collections.EMPTY_LIST;
 Map<Variable, List<Variable>> inputVariableMap = java.util.Collections.EMPTY_MAP;
 Token t = null;
 String attrId = null;
 int position = 1;
 Variable variable = null;
 List<Variable> ifVariables = null;
}
{
 ( LOOKAHEAD( long_expression() )
   ret = long_expression()
 |
   (
     < SYM_FOR_ALL > item = expression_leaf()
     {
       op = OperatorKind.FOR_ALL;
     }
   | < SYM_NOT > item = expression_leaf()
     {
       op = OperatorKind.NOT;
     }
   | < SYM_MAX > item = expression_leaf()
     {
       op = OperatorKind.MAX;
     }
   | < SYM_MIN > item = expression_leaf()
     {
       op = OperatorKind.MIN;
     }
   | < SYM_FIRED > item = expression_leaf()
     {
       op = OperatorKind.FIRED;
     }
   | t = < SYM_MATH_FUNCTION > < SYM_L_PARENTHESIS > item = expression_item() < SYM_R_PARENTHESIS >
     {
       return FunctionalExpression.create(new Function(t.image), item);
     }
   | t = < SYM_USE_TEMPLATE > < SYM_L_PARENTHESIS > variable = variable()
                     [ assignmentExpressions = assignmentExpressions() ]
                     [
                       < SYM_L_BRACKET >
                         [
                           < SYM_IF > < SYM_COLON > ifVariables = variables() < SYM_SEMICOLON >
                         ]
                         inputVariableMap = map_of_variable_lists_keyed_by_variable()
                       < SYM_R_BRACKET >
                     ]
               < SYM_R_PARENTHESIS >
           {
             return new UseTemplateExpression(variable, assignmentExpressions, ifVariables, inputVariableMap);
           }
   |t = < SYM_ANY >
           [ < SYM_L_BRACKET > inputVariables = variables() < SYM_R_BRACKET > ]
        item = expression_leaf()
     {
       return new AnyExpression(inputVariables, item);
     }
   |
     LOOKAHEAD(2)
     < SYM_NOT_FIRED > item = expression_leaf()
     {
       op = OperatorKind.NOT_FIRED;
     }
   )
   {
     return new UnaryExpression(item, op);
   }
 |
   LOOKAHEAD(3)
   (
     item = expression_leaf()
   [
     LOOKAHEAD(2)
     (
       < SYM_EQ >
       {
         op = OperatorKind.EQUALITY;
       }
     | < SYM_NE >
       {
         op = OperatorKind.UNEQUAL;
       }
     | < SYM_LT >
       {
         op = OperatorKind.LESS_THAN;
       }
     | < SYM_GT >
       {
         op = OperatorKind.GREATER_THAN;
       }
     | < SYM_LE >
       {
         op = OperatorKind.LESS_THAN_OR_EQUAL;
       }
     | < SYM_GE >
       {
         op = OperatorKind.GREATER_THAN_OR_EQUAL;
       }
     | < SYM_PLUS >
       {
         op = OperatorKind.ADDITION;
       }
     | < SYM_MINUS >
       {
         op = OperatorKind.SUBTRACTION;
       }
     | < SYM_STAR >
       {
         op = OperatorKind.MULTIPLICATION;
       }
     | < SYM_SLASH >
       {
         op = OperatorKind.DIVISION;
       }
     | < SYM_CARET >
       {
         op = OperatorKind.EXPONENT;
       }
     | < SYM_AND >
       {
         op = OperatorKind.AND;
       }
     | < SYM_OR >
       {
         op = OperatorKind.OR;
       }
     | < SYM_IS_A >
       {
         op = OperatorKind.IS_A;
       }
     | < SYM_IS_NOT_A >
       {
         op = OperatorKind.IS_NOT_A;
       }
     |
       LOOKAHEAD(4)
       < SYM_ASSIGNMENT >
       {
         op = OperatorKind.ASSIGNMENT;
       }
       (
         LOOKAHEAD(long_expression())
         item2 = long_expression()
       |
         LOOKAHEAD(expression_item())
         item2 = expression_item()
       )
       {
         return new AssignmentExpression((Variable) item, item2);
       }
     |
       LOOKAHEAD(4)
       assignmentExpressions = assignmentExpressions()
       {
         return new CreateInstanceExpression((Variable) item, assignmentExpressions);
       }
     )
     item2 = expression_leaf()
   ]
     {
       if(item2 != null && op != null) {
         ret = new BinaryExpression(item, item2, op);
       } else {
         ret = item;
       }
     }
   )
 )
 {
   return ret;
 }
}

Map<Variable, List<Variable>> map_of_variable_lists_keyed_by_variable() :
{
 Token t = null;
 Variable key = null;
 List<Variable> list = null;
 Map<Variable, List<Variable>> map = new LinkedHashMap();
}
{
 (
   key = variable() < SYM_COLON > list = variables() [ < SYM_SEMICOLON > ]
   {
     map.put(key, list);
   }
 )*
 {
   return map;
 }
}

ExpressionItem expression_leaf() :
{
 ExpressionItem item = null;
 Token t = null;
}
{
 (
   < SYM_L_PARENTHESIS >
   (
     LOOKAHEAD(expression_node())
     item = expression_node()
   | LOOKAHEAD(variable())
     item = variable()
   | LOOKAHEAD(constant_expression())
     item = constant_expression()
   )
   < SYM_R_PARENTHESIS >
 | item = constant_expression()
 | LOOKAHEAD(2)
   item = variable()
 | LOOKAHEAD(2)
   item = reference_variable()
 )
 {
   return item;
 }
}

BinaryExpression binary_expression() :
{
 ExpressionItem item;
 ExpressionItem item2;
 OperatorKind op;
}
{
   item = expression_leaf()
   (
     < SYM_EQ >
     {
       op = OperatorKind.EQUALITY;
     }
   | < SYM_NE >
     {
       op = OperatorKind.UNEQUAL;
     }
   | < SYM_LT >
     {
       op = OperatorKind.LESS_THAN;
     }
   | < SYM_GT >
     {
       op = OperatorKind.GREATER_THAN;
     }
   | < SYM_LE >
     {
       op = OperatorKind.LESS_THAN_OR_EQUAL;
     }
   | < SYM_GE >
     {
       op = OperatorKind.GREATER_THAN_OR_EQUAL;
     }
   | < SYM_PLUS >
     {
       op = OperatorKind.ADDITION;
     }
   | < SYM_MINUS >
     {
       op = OperatorKind.SUBTRACTION;
     }
   | < SYM_STAR >
     {
       op = OperatorKind.MULTIPLICATION;
     }
   | < SYM_SLASH >
     {
       op = OperatorKind.DIVISION;
     }
   | < SYM_CARET >
     {
       op = OperatorKind.EXPONENT;
     }
   | < SYM_AND >
     {
       op = OperatorKind.AND;
     }
   | < SYM_OR >
     {
       op = OperatorKind.OR;
     }
   | < SYM_IS_A >
     {
       op = OperatorKind.IS_A;
     }
   | < SYM_IS_NOT_A >
     {
       op = OperatorKind.IS_NOT_A;
     }
   )
   item2 = expression_leaf()

   {
     return new BinaryExpression(item, item2, op);
   }
}

AssignmentExpression assignmentExpression() :
{
   ExpressionItem item = null;
   ExpressionItem item2 = null;
}
{
   (
    item = expression_leaf()
    < SYM_ASSIGNMENT >
    item2 = expression_item()
   )
   {
       return new AssignmentExpression((Variable) item, item2);
   }
}

List < AssignmentExpression > assignmentExpressions() :
{
   List < AssignmentExpression > items = new ArrayList < AssignmentExpression > ();
   AssignmentExpression item = null;
}
{
   (
    < SYM_L_PARENTHESIS >
    item = assignmentExpression()
    {
       items.add(item);
    }
    (
     LOOKAHEAD(2)
     < SYM_SEMICOLON > item = assignmentExpression()
     {
       items.add(item);
     }
    )*
    < SYM_R_PARENTHESIS >
   )

   {
       return items;
   }
}

List < Variable > variables() :
{
   List < Variable > items = new ArrayList < Variable > ();
   Variable item = null;
}
{
   (
    item = variable()
    {
       items.add(item);
    }
    (
     LOOKAHEAD(2)
     < SYM_COMMA > item = variable()
     {
       items.add(item);
     }
    )*
   )
   {
       return items;
   }
}


ConstantExpression constant_expression() :
{
 Token t = null;
 CodePhrase definingCode = null;
 String text = null;
 Integer order = null;
}
{
 (
   < SYM_E>
   {
     return MathConstant.create(Constant.E);
   }
 |    t = < V_STRING >
   {
     String str = t.image;
     return new StringConstant(str.substring(1, str.length() - 1));
   }
 | t = < V_ORDINAL >
   {
     DvOrdinal ordinal = DvOrdinal.valueOf(t.image);
     return new OrdinalConstant(ordinal);
   }
 | t = < V_REAL >
   {
     return new DoubleConstant(t.image);
   }
 | t = < V_INTEGER >
   {
     return new IntegerConstant(t.image);
   }
 | t = < V_PROPORTION >
 | t = <V_DATE>
 | t = <V_DATE_TIME_Z>
   {
     text = t.image;
     text = text.replace("(","");
     text = text.replace(")","");
     return new DateTimeConstant(text);
    }
 | t = <V_DATE_TIME>
   {
     text = t.image;
     text = text.replace("(","");
     text = text.replace(")","");
     return new DateTimeConstant(text);
    }
 | t = <V_TIME>
 | t = <V_ISO8601_DURATION>
 | t = < SYM_NULL >
 | t = < SYM_TRUE >
 | t = < SYM_FALSE >
 | LOOKAHEAD(2)
   definingCode = code_phrase_raw() [ text = label() ]
   {
     if (text != null)
     {
       return new CodedTextConstant(text, definingCode);
     }
     else
     {
       return new CodePhraseConstant(definingCode);
     }
   }
 | t = < V_QUANTITY >
   {
     text = t.image;
     text = text.replace("(","");
     text = text.replace(")","");
     DvQuantity q = DvQuantity.valueOf(text);
     return new QuantityConstant(q);
   }
 )
 {
   return new ConstantExpression(t.image);
 }
}

Variable variable() :
{
 Variable v;
 Token t;
 String definingCode = null;
 String path = null;
 String label = null;
 String attribute = null;
}
{
 (
   < SYM_DOLLAR >
   (
     t = < V_LOCAL_CODE >
   | t = < SYM_CURRENT_DATETIME >
   | t= < SYM_CURRENT_DATE >
   )
   {
     definingCode = t.image;
   }
   [ label = label() ]
 | t = < V_RELATIVE_PATH>
   {
     path = t.image;
   }
 | t = < V_ABSOLUTE_PATH >
   {
     path = t.image;
   }
 )
 [
   < SYM_DOT > t = < V_ATTRIBUTE_IDENTIFIER >
   {
     attribute = t.image;
   }
 ]
 {
   return new Variable(definingCode, label, path, attribute);
 }
}

ReferenceVariable reference_variable() :
{
 Token t;
 String attribute = null;
 int index = 0;
}
{
 < SYM_DOLLAR > < SYM_REF > < SYM_L_BRACKET > index = integer() < SYM_R_BRACKET >
 < SYM_DOT > t = < V_ATTRIBUTE_IDENTIFIER >
 {
   attribute = t.image;
   return new ReferenceVariable(index, attribute);
 }
}

LongExpression long_expression() :
{
 OperatorKind operator;
 ExpressionItem item;
 List items = new ArrayList();
}
{
 item = long_expression_operand()
 operator = long_expression_operator()
 {
   items.add(new LongExpression.OperandPair(item, operator));
   operator = null;
 }
 (
   LOOKAHEAD(2)
   item = long_expression_operand()
   [ operator = long_expression_operator() ]
   {
     items.add(new LongExpression.OperandPair(item, operator));
     operator = null;
   }
 )*
 {
   return new LongExpression(items);
 }
}

ExpressionItem long_expression_operand() :
{
 ExpressionItem item;
}
{
 (
    < SYM_L_PARENTHESIS >
     (
       LOOKAHEAD(expression_node())
       item = expression_node()
     |
       LOOKAHEAD(variable())
       item = variable()
     |
       LOOKAHEAD(constant_expression())
       item = constant_expression()
     )
    < SYM_R_PARENTHESIS >
 |
   LOOKAHEAD( variable() )
   item = variable()
 |
   LOOKAHEAD( constant_expression() )
   item = constant_expression()
 |
   item = functional_expression()
 )
 {
   return item;
 }
}

FunctionalExpression functional_expression() :
{
 Token t;
 ExpressionItem item;
}
{
 t = < SYM_MATH_FUNCTION >
 < SYM_L_PARENTHESIS >
   (
     LOOKAHEAD(expression_node())
     item = expression_node()
   |
     LOOKAHEAD(variable())
     item = variable()
   |
     LOOKAHEAD(constant_expression())
     item = constant_expression()
   )
 < SYM_R_PARENTHESIS >
 {
   return FunctionalExpression.create(new Function(t.image), item);
 }
}

OperatorKind long_expression_operator() :
{
 OperatorKind op;
}
{
 (
   < SYM_PLUS >
   {
     op = OperatorKind.ADDITION;
   }
 | < SYM_MINUS >
   {
     op = OperatorKind.SUBTRACTION;
   }
 | < SYM_STAR >
   {
     op = OperatorKind.MULTIPLICATION;
   }
 | < SYM_SLASH >
   {
     op = OperatorKind.DIVISION;
   }
 | < SYM_CARET >
   {
     op = OperatorKind.EXPONENT;
   }
 | < SYM_REMINDER >
   {
     op = OperatorKind.REMINDER;
   }
 | < SYM_AND >
   {
     op = OperatorKind.AND;
   }
 | < SYM_OR >
   {
     op = OperatorKind.OR;
   }
 | < SYM_EQ >
   {
     op = OperatorKind.EQUALITY;
   }
 | < SYM_NE >
   {
     op = OperatorKind.UNEQUAL;
   }
 | < SYM_GT >
   {
     op = OperatorKind.GREATER_THAN;
   }
 | < SYM_LT >
   {
     op = OperatorKind.LESS_THAN;
   }
 | < SYM_GE >
   {
     op = OperatorKind.GREATER_THAN_OR_EQUAL;
   }
 | < SYM_LE >
   {
     op = OperatorKind.LESS_THAN_OR_EQUAL;
   }
 )
 {
   return op;
 }
}

String label() :
{
 Token t;
 String label = null;
}
{
 t = < V_LABEL >
 {
   label = t.image;
   label = label.substring(1, label.length() - 1);
   return label;
 }
}

double real() :
{
 Token t;
 String value = null;
}
{
 t = < V_REAL >
 {
   value = t.image;
   return Double.parseDouble(value);
 }
}

int integer() :
{
 Token t;
 String value = null;
}
{
 t = < V_INTEGER >
 {
   value = t.image;
   return Integer.parseInt(value);
 }
}
